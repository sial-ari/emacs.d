#+TITLE: Programming 
#+AUTHOR: Vladimir (sial) Todorov
#+EMAIL:  sial@ludost.net

* intro
* theory
** links
   [[https://theantlrguy.atlassian.net/wiki/display/ANTLR3/The%2Bdifference%2Bbetween%2Bcompilers%2Band%2Binterpreters][difference between interpreters and compilers]]
   [[http://www.programmingforbeginnersbook.com/blog/friction_between_programming_professionals_and_beginners/][friction between noobs and leets]]
   [[http://probablydance.com/2016/02/27/functional-programming-is-not-popular-because-it-is-weird/][functional programming is not popular because it is weird]]
   [[http://darkpatterns.org/][darkpatterns]]
   [[https://blog.pivotal.io/labs/labs/how-to-talk-to-your-friends-about-microservices][how to talk to your friends about microservices]]
   [[http://blog.cleancoder.com/uncle-bob/2014/10/01/CleanMicroserviceArchitecture.html][Clean Architecture]]
   [[https://ilya-sher.org/2016/05/19/tips-for-beginning-systems-and-software-engineers/][tips for beginning systems and software engineers]]
   [[https://github.com/karan/Projects][mega programming projects list]]
   [[http://fare.tunes.org/files/asdf3/asdf3-2014.html][why lisp is now an acceptable scripting language]]
   [[http://danluu.com/programming-blogs/][programming blogs]]
   [[http://www.cs.uni.edu/~wallingf/blog/archives/monthly/2016-05.html#e2016-05-23T13_55_02.htm][prog blog]]
   [[http://canonical.org/~kragen/memory-models/][memory-models]]
   [[http://www.craftinginterpreters.com/][http://www.craftinginterpreters.com/]]
   [[http://semver.org/][semantic versioning]]
   [[https://techiedelight.quora.com/500-Data-Structures-and-Algorithms-practice-problems-and-their-solutions?share%3D1][500 Data Structures and Algorithms practice problems and their solutions]]

** APIs
   [[https://game-on.org/#/play][game-
   [[http://www.restapitutorial.com/][REST API Tutorial]]
* perl
** basics
   
   Types:
   

** Links
   [[http://search.cpan.org/~ether/WWW-Mechanize-1.75/lib/WWW/Mechanize.pm][Mechanize.pm]]
* ruby

** Rails
*** Introduction

*** Links
   [[http://brandonhilkert.com/blog/sidekiq-as-a-microservice-message-queue/?utm_source%3Drubyweekly&utm_medium%3Demail][Sidekiq Microservice Arch for Rails]]
   [[http://blog.codeship.com/the-definitive-guide-to-ruby-heap-dumps-part-i/?utm_source%3Drubyweekly&utm_medium%3Demail][Ruby Heap Dumps]]
   [[http://blog.codeship.com/visualizing-garbage-collection-ruby-python/][Garbage Collection Ruby/Python]]
   [[https://blog.codeship.com/using-docker-for-rails-development/?utm_source%3Drubyweekly&utm_medium%3Demail][Docker for Rails development]]
   [[http://blog.codeship.com/automate-your-dev-workflow-with-docker/][Automate Dev Workflow with Docker]]
   [[https://howchoo.com/g/y2y1mtkznda/getting-started-with-docker-compose-and-django?utm_source%3DPython%2BWeekly%2BNewsletter&utm_campaign%3D9edebee457-Python_Weekly_Issue_219_November_26_2015&utm_medium%3Demail&utm_term%3D0_9e26887fc5-9edebee457-305586741][Docker,Compose and Django]]
   [[https://talkpython.fm/episodes/show/33/openstack-cloud-computing-built-on-python?utm_source%3DPython%2BWeekly%2BNewsletter&utm_campaign%3D2f04961eb5-Python_Weekly_Issue_217_November_12_2015&utm_medium%3Demail&utm_term%3D0_9e26887fc5-2f04961eb5-305586741][OpenStack talkpython]]

* python

** lang 
   
   # - octothorpe, pound, hash, mesh - comment
   
   print - prints text on stdout
   
   <, >, >=, <= - returns True or False

   print format strings(old format)

   #+BEGIN_SRC python
   my_name = 'Zed A. Shaw'
   my_age = 35

   print "Let's talk about %s." % my_name
   print "He is %d years old." % my_age
   #+END_SRC

   read input from stdin:

   #+BEGIN_SRC python
   age = raw_input("How old are you? ")
   height = raw_input("How tall are you? ")
   weight = raw_input("How much do you weigh? ")

   print "So, you're %r old, %r tall and %r heavy." % (
      age, height, weight)
   #+END_SRC

   get arguments from command line:

   #+BEGIN_SRC python
   from sys import argv

   script, filename = argv # first argument is script's name
   #+END_SRC

   open files:

   #+BEGIN_SRC python
   from sys import argv

   script, filename = argv
   
   txt = open(filename)
   
   print "Here's your file %r:" % filename
   print txt.read()
   
   print "Type the filename again:"
   file_again = raw_input("> ")
   
   txt_again = open(file_again)
   
   print txt_again.read()
   #+END_SRC
   
   open, close, write, truncate a file:

   #+BEGIN_SRC python
   from sys import argv

   script, filename = argv
   
   print "We're going to erase %r." % filename
   print "If you don't want that, hit CTRL-C (^C)."
   print "If you do want that, hit RETURN."
   
   raw_input("?")
   
   print "Opening the file..."
   target = open(filename, 'w')
   
   print "Truncating the file..."
   target.truncate()
   
   print "Now I'm going to ask you for three lines."
   
   line1 = raw_input("line 1: ")
   line2 = raw_input("line 2: ")
   line3 = raw_input("line 3: ")
   
   print "I'm going to write these to the file."
   
   target.write(line1)
   target.write("\n")
   target.write(line2)
   target.write("\n")
   target.write(line3)
   target.write("\n")
   
   print "And finally, we close it."
   target.close()
   
   #+END_SRC

   functions are declared with 'def':

   #+BEGIN_SRC python
   def print_two(*args):
       arg1, arg2 = args
       print "arg1: %r, arg2: %r" % (arg1, arg2)
   #+END_SRC
   
** django_tutorial

   Create initial project:

   #+BEGIN_SRC sh
   cd ~/projects/python
   pyenv shell 3.4.3
   pyenv virtualenvwrapper_lazy
   workon django_tutorial
   django-admin startproject django_tutorial
   #+END_SRC

   Run development server:

   #+BEGIN_SRC sh
   cd ~/projects/python/django_tutorial
   pyenv shell 3.4.3
   pyenv virtualenvwrapper_lazy
   workon django_tutorial
   python manage.py runserver
   #+END_SRC

   Generate tree for polls app

   #+BEGIN_SRC sh
   cd ~/projects/python/django_tutorial
   pyenv shell 3.4.3
   pyenv virtualenvwrapper_lazy
   workon django_tutorial
   python manage.py startapp polls
   #+END_SRC

   Create migrations from the changes

   #+BEGIN_SRC sh
   python manage.py makemigrations polls
   #+END_SRC

   Apply db migrations

   #+BEGIN_SRC sh
   python manage.py migrate
   #+END_SRC
   
   Django tracks migrations using a special django_migrations table in the database.

   Start interactive python with DJANGO_SETTINGS_MODULE set by manage.py

   #+BEGIN_SRC sh
   python manage.py shell
   #+END_SRC

   #+BEGIN_SRC python
   from polls.models import Question, Choice
   from django.utils import timezone

   Question.objects.all()

   q = Question(question_text="What's new?", pub_date=timezone.now())
   q.save()
   q.id

   #+END_SRC

   Create admin user
   
   #+BEGIN_SRC sh
   python manage.py createsuperuser
   #+END_SRC

   To get from a URL to a view, Django uses what are known as ‘URLconfs’. 
   A URLconf maps URL patterns (described as regular expressions) to views.


   
** boto
   
   
** supervisord
   [[http://supervisord.org/subprocess.html#subprocess-environment][supervisord subprocess environment]]
   [[https://serversforhackers.com/monitoring-processes-with-supervisord][monitoring processes with supervisord]]

   
** links
   [[http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html][thirty python tips and tricks]]
   [[https://github.com/umermansoor/microservices][microservices]]
   [[http://robotframework.org/][robotframework]]
   [[https://github.com/ronf/asyncssh][asyncssh]]
   [[http://blog.deepgram.com/import-a-docker-container-in-python/][import a docker container in python]]
   [[http://www.kennethreitz.org/essays/a-better-pip-workflow][a better pip workflow]]
   [[http://www.catb.org/esr/faqs/practical-python-porting/][practical system python porting]]
   [[https://realpython.com/blog/python/development-and-deployment-of-cookiecutter-django-via-docker/?utm_source%3DPython%2BWeekly%2BNewsletter&utm_campaign%3D677740d502-Python_Weekly_Issue_224_December_31_2015&utm_medium%3Demail&utm_term%3D0_9e26887fc5-677740d502-305586741][cookiecutter - django boilerplate]]
   [[http://pythontesting.net/start-here/][pythontesting]]
   [[https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/][good logging practice in python]]
   [[https://github.com/oilshell/blog-code/blob/master/forth-like/demo.py][forth-like python]]
   [[https://hackernoon.com/asynchronous-python-45df84b82434#.ig4pyaz6c][asynchronous python]]
   [[http://www.simplydjango.com/learn-python-efficiently/][learn python efficiently]]

 
** get

** ENV vars with python
   
   #+BEGIN_SRC python
   import os
   print os.environ['HOME']
   #+END_SRC

** virtualenv
   
   Install:
   
   #+BEGIN_SRC sh
   [sudo] pip install virtualenv
   #+END_SRC

   Usage:
   
   #+BEGIN_SRC sh
   virtualenv <ENV-NAME> # will create virtualenv in the ENV-NAME dir
   source <ENV-NAME>/bin/activate
   #+END_SRC

** conditionals
 [[http://dvt.name/2017/03/10/pep-308-and-why-i-still-hate-python/][conditionals critique]]

** python-fitbit

   Use virtualenv:
   #+BEGIN_SRC sh
   pyenv virtualenvwrapper_lazy
   workon fitbit
   #+END_SRC

   
* js

** lang
   
*** values
**** numbers
     - 13
     - Infinity
     - -Infinity
     - NaN
**** strings
     - "like this"
     - 'like that'
**** Booleans
     - true
     - false
     - > < != == && ||
**** objects
**** functions
**** undefined values
*** expressions and statements
*** variables
    var name = <value>;
*** keywords and reserved words
    break case catch continue debugger default delete
    do else false finally for function if implements
    in instanceof interface let new null package private
    protected public return static switch throw true
    try typeof var void while with yield this
*** functions
    invoke - name(arguments)
    example:

    #+BEGIN_SRC js
    var x = 30;
    console.log("the value of x is", x);
    #+END_SRC
*** return values
    #+BEGIN_SRC js
    console.log(Math.max(2, 4));
    #+END_SRC
*** conditional execution
**** if
    
   #+BEGIN_SRC js
   var num = Number(prompt("Pick a number", "0"));

   if (num < 10)
     alert("Small");
   else if (num < 100)
     alert("Medium");
   else
     alert("Large");
   #+END_SRC
**** while

   #+BEGIN_SRC js
   var number = 0;

   while (number <= 12) {
     console.log(number);
     number = number +2;
   }
   #+END_SRC
**** do
  
   #+BEGIN_SRC js
   do {
     var name = prompt("Who are you?");
   } while (!name);
   console.log(name);
   #+END_SRC
**** for
   
   #+BEGIN_SRC js
   for (var number = 0; number <= 12; number = number +2)
     console.log(number);
   #+END_SRC
**** break and continue
   
   #+BEGIN_SRC js
   for (var current = 20; curent++) {
     if (current % 7 ==0)
       break;
   }
   console.log(current);
   #+END_SRC
**** updating vars succinctly
     - var += 1;
     - ++ - += 1
     - -- - -= 1
**** switch
   
   #+BEGIN_SRC js
   switch (prompt("What is the weather like?")) {
     case "rainy":
       console.log("Remember to bring an umbrella.");
       break;
     case "sunny":
       console.log("Dress lightly.");
     case "cloudy":
       console.log("Go outside.");
       break;
     default:
       console.log("Unknown weather type!");
       break;
     }
   #+END_SRC
**** comments
     - //
     - /* block */
     
** links
   [[https://github.com/DrkSephy/es6-cheatsheet][es6-cheatsheet]]
   [[http://todomvc.com/][todomvc]]
   [[https://blog.balboa.io/emscripten.html][emscripten]]
   [[https://github.com/altitude/login-with-ssh][login with ssh]]
   [[https://github.com/cjb/gittorrent][gittorrent]]

* bash

** links
   [[http://www.catonmat.net/blog/bash-one-liners-explained-part-three/][bash one liners explained part three]]
   
   [[http://bencane.com/2014/06/06/8-tips-for-creating-better-bash-scripts/][8 tips for creating better bash scripts]]
   [[https://felixmilea.com/2014/12/running-bash-commands-background-properly/][running bash commands background properly]]
   [[http://www.pixelbeat.org/programming/shell_script_mistakes.html][shell script mistakes]]
   [[http://tldp.org/LDP/abs/html/][advanced bash scripting guide]]
   [[https://google.github.io/styleguide/shell.xml][google styleguide bash]]
   [[http://wiki.bash-hackers.org/][wiki bash-hackers]]
   [[http://tldp.org/LDP/abs/html/][advanced bash scripting guide]]
   [[http://www.oilshell.org/blog/2017/01/13.html][shell has a forth-like quality]]
 
** To Do
   
*** TODO timeout
    
  Correctly passing an array:
  #+BEGIN_SRC sh
  "${a[@]}"
  #+END_SRC

  Correctly copying array:
  #+BEGIN_SRC sh
  b=( "${a[@]}" )
  #+END_SRC
    
** awk
   
   Match by filename & print size in human readable form:
   #+BEGIN_SRC sh
   ls -lah |awk 'match($9, /^ud_.*/) { print $9,$5}' 
   #+END_SRC

** questions
   
*** TODO array
*** TODO sorting/unique elements/counting
* clojure

** lang
*** Forms
1
"a string"
["a" "vector" "of" "strings"]

*** Operations
(operator operand1 operand2 ... operandn)

*** Control Flow
**** if
(if boolean-form
  then-form
  optional-else-form)

**** do
(if true
  (do (println "Success!")
      "abra cadabra")
  (do (println "Failure :(")
      "hocus pocus"))

**** when
(when true
  (println "Success!")
  "abra cadabra")

*** def
(def failed-protagonist-names
  ["Larry Potter"
   "Doreen the Explorer"
   "The Incredible Bulk"])

*** Strings
"Only double quotes"

*** Map
{:a 1
 :b "boring example"
 :c []}

*** Vector
[]

*** Lists
'()


** links
   [[https://blog.balboa.io/emscripten.html][emscripten]]
   
* c
** While
while(cond) {
  statement;
}

* zsh 
** http://reasoniamhere.com/2014/01/11/outrageously-useful-tips-to-master-your-z-shell/
** https://github.com/mafredri/zsh-async
** https://github.com/skx/sysadmin-util
** http://bencane.com/2014/09/02/understanding-exit-codes-and-how-to-use-them-in-bash-scripts/
** http://www.kfirlavi.com/blog/2012/11/14/defensive-bash-programming
** [[https://github.com/jlevy/the-art-of-command-line][The Art of Command Line]]
** [[http://blog.xebia.com/profiling-zsh-shell-scripts/][Profiling zsh scripts]]

* guile
** links
   [[https://wingolog.org/archives/2016/01/11/the-half-strap-self-hosting-and-guile][half-strap self-hosting guile]]

* tools
  
** git
   [[https://gist.github.com/mplewis/a7563c7cb589048a071b][git primer]]
   [[http://vanwilson.info/2015/12/the-12-days-of-git-learn-git-over-the-holidays/][12 day of git]]
   [[https://github.com/ndbroadbent/scm_breeze][scm breeze]]
   
   Good commit msg(by Torvalds):
   
   A good commit message looks like this:

   Header line: explaining the commit in one line

   Body of commit message is a few lines of text, explaining things
   in more detail, possibly giving some background about the issue
   being fixed, etc etc.

   The body of the commit message can be several paragraphs, and
   please do proper word-wrap and keep columns shorter than about
   74 characters or so. That way "git log" will show things
   nicely even when it's indented.

   Reported-by: whoever-reported-it
   Signed-off-by: Your Name <youremail@yourhost.com>

   where that header line really should be meaningful, and really should be
   just one line.  That header line is what is shown by tools like gitk and
   shortlog, and should summarize the change in one readable line of text,
   independently of the longer explanation.
   
*** Git Tips & Tricks
**** https://github.com/tj/git-extras
**** http://nvie.com/posts/a-successful-git-branching-model/
**** https://github.com/stevemao/awesome-git-addons#git-open
**** https://github.com/crackleware/git-auto-sync
**** https://github.com/arslanbilal/git-cheat-sheet#local-changes
**** http://luisbg.blogalia.com//historias/76017
**** http://chris.beams.io/posts/git-commit/
**** http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html !!!
**** http://think-like-a-git.net/
**** [[http://scottchacon.com/2011/08/31/github-flow.html][Github Flow]]
** emacs
*** [[https://www.youtube.com/watch?v%3DdljNabciEGg][Literate Devops]]
*** emacs easypg 
***  orgfiles + git-sync + git-crypt + inotifywait
***  https://github.com/jwiegley/use-package
*** org-beatify-theme 
*** expand-region 
*** org cheat sheet
**** C-c C-n     (outline-next-visible-heading)
**** C-c C-p     (outline-previous-visible-heading)
**** C-c C-f     (org-forward-same-level)
**** C-c C-b     (org-backward-same-level)
**** C-c C-u     (outline-up-heading)
**** C-c C-j     (org-goto)
**** M-<RET>     (org-insert-heading)
**** C-<RET>     (org-insert-heading-respect-content)
**** M-S-<RET>     (org-insert-todo-heading)
**** C-S-<RET>     (org-insert-todo-heading-respect-content)
**** M-<left>     (org-do-promote)
**** M-<right>     (org-do-demote)
**** M-S-<left>     (org-promote-subtree)
**** M-S-<right>     (org-demote-subtree)
**** M-S-<up>     (org-move-subtree-up)
**** M-S-<down>     (org-move-subtree-down)
**** M-S-<RET> Insert a new item with a checkbox
**** M-h     (org-mark-element)
**** C-c @     (org-mark-subtree)
**** C-c C-x C-w     (org-cut-subtree)
**** C-c C-x M-w     (org-copy-subtree)
**** C-c C-x C-y     (org-paste-subtree)
**** C-y     (org-yank)
**** C-c *     (org-toggle-heading)
**** C-c C-c  If there is a checkbox  in the item line, toggle the state of the checkbox. In any case, verify bullets and indentation consistency in the whole list. 
**** C-c C-*  Turn the whole plain list into a subtree of the current heading.
**** C-c C-l     (org-insert-link)
**** C-c C-o     (org-open-at-point)
**** C-c C-t     (org-todo)
**** C-c a t     (org-todo-list)
***** 
*** https://www.masteringemacs.org/all-articles

*** posts all over the internetz
**** [[http://www.howardism.org/Technical/Emacs/why-emacs.html][Why Emacs?]]
**** [[http://sachachua.com/blog/2013/09/how-to-learn-emacs-keyboard-shortcuts-a-visual-tutorial-for-newbies/][Visual Emacs Shortcuts Tutorial]]
**** [[http://edward.oconnor.cx/2009/07/learn-emacs-in-ten-years][Learn Emacs in 10 years]]
**** [[http://howardism.org/Technical/Emacs/literate-devops.html][Literate Devops Blog Post]]
**** [[http://emacsrocks.com/][EmacsRocks Screencasts]]
**** [[https://quizlet.com/11892232/basic-emacs-flash-cards/][Basic Emacs Flash Cards]]
**** [[http://jaderholm.com/screencasts.html][Mostly Emacs ScreenCasts]]
**** [[http://www.jesshamrick.com/2012/09/18/emacs-as-a-python-ide/][Emacs as a Python IDE]]
**** [[https://vimeo.com/14742598][Emacs Calc]]
**** [[http://orgmode.org/worg/org-tutorials/org4beginners.html][Org4Beginners]]
**** [[http://www.gnu.org/software/emacs/manual/html_mono/ert.html#Introduction][Emacs Regression Testing]]
**** [[https://realpython.com/blog/python/emacs-the-best-python-editor/?utm_source%3DPython%2BWeekly%2BNewsletter&utm_campaign%3Dc3a5d1d4a8-Python_Weekly_Issue_220_December_3_2015&utm_medium%3Demail&utm_term%3D0_9e26887fc5-c3a5d1d4a8-305586741][Emacs Python IDE]]
*** Literate Devops

[[https://www.youtube.com/watch?v%3DdljNabciEGg][Literate DevOps Youtube Video]]
[[https://www.youtube.com/watch?v%3DvQO7F2Q9DwA][Magit Introduction and Demo]]
<s + TAB - src org block (org-babel)
ox - slack export
expand-region package
C-c ' - for opening in langs major mode
C-c C-v t - org-babel-tangle
#+BEGIN_SRC sh
echo "Hello, literate world!"
#+END_SRC

#+BEGIN_SRC sh :dir ~/projects
  ls -lah
#+END_SRC

#+BEGIN_SRC sh :tangle ~/.org/literate.sh
echo "Hello, literate world!"
#+END_SRC

#+RESULTS:
| Hello | literate world! |
**** story
   :PROPERTIES:
   :dir: ~/.org/literate-examples
   :END:
   

   #+BEGIN_SRC sh
   mkdir dist
   touch file.txt
   tar czvf dist/archive.tgz file.txt
   #+END_SRC

#+NAME: tar-archive
#+BEGIN_SRC sh
ls dist
#+END_SRC

#+RESULTS: tar-archive
: archive.tgz

#+BEGIN_SRC sh :var ZIP=tar-archive
tar -tzf dist/$ZIP
#+END_SRC

#+RESULTS:
: file.txt

**** remote work
     :PROPERTIES:
     :dir:      /nympha:
     :session:  nympha-session
     :results:  output
     :END:      
     

     Playing with tramp + org-mode + org-babel for literate devops
     (setq tramp-default-method "ssh")
     (setq tramp-verbose 10)
     (setenv "ESHELL" "bash")

     Org-mode properties:
     
     ':dir:' - for usage with tramp
     ':session:' - for sharing ssh session in tramp

     TRAMP pipes /ssh:bastion.example.com|jumpbox.example.com:~/test.txt
     

     #+BEGIN_SRC sh
     hostname --long
     #+END_SRC

     #+RESULTS:
     : 10.0.9.3

     #+BEGIN_SRC sh :results table list :post column1(data=*this*)
       sudo dnf list installed |egrep -i '^python\b' 
     #+END_SRC

     #+RESULTS:
     - python.x86_64
     - python-BeautifulSoup.noarch
     - python-GeoIP.x86_64
     - python-IPy.noarch
     - python-PyGithub.noarch
     - python-augeas.noarch
     - python-babel.noarch
     - python-backports.x86_64
     - python-backports-ssl_match_hostname.noarch
     - python-blivet.noarch
     - python-caribou.noarch
     - python-cffi.x86_64
     - python-chardet.noarch
     - python-coverage.x86_64
     - python-crypto.x86_64
     - python-cryptography.x86_64
     - python-cssselect.noarch
     - python-dateutil.noarch
     - python-decorator.noarch
     - python-devel.x86_64
     - python-dmidecode.x86_64
     - python-dnf.noarch
     - python-dnf-plugins-core.noarch
     - python-dnf-plugins-extras-common.noarch
     - python-dnf-plugins-extras-migrate.noarch
     - python-ecdsa.noarch
     - python-enum34.noarch
     - python-firewall.noarch
     - python-hawkey.x86_64
     - python-httplib2.noarch
     - python-humanize.noarch
     - python-idna.noarch
     - python-iniparse.noarch
     - python-inotify.noarch
     - python-ipaddr.noarch
     - python-ipaddress.noarch
     - python-jinja2.noarch
     - python-keyczar.noarch
     - python-kitchen.noarch
     - python-libcomps.x86_64
     - python-librepo.x86_64
     - python-libs.x86_64
     - python-lxml.x86_64
     - python-macros.noarch
     - python-magic.noarch
     - python-markupsafe.x86_64
     - python-meh.noarch
     - python-meh-gui.noarch
     - python-miniupnpc.x86_64
     - python-mutagen.noarch
     - python-ndg_httpsclient.noarch
     - python-nss.x86_64
     - python-ntplib.noarch
     - python-paramiko.noarch
     - python-pexpect.noarch
     - python-pillow.x86_64
     - python-pip.noarch
     - python-ply.noarch
     - python-progress.noarch
     - python-psutil.x86_64
     - python-pwquality.x86_64
     - python-pyasn1.noarch
     - python-pyblock.x86_64
     - python-pycparser.noarch
     - python-pycurl.x86_64
     - python-pyudev.noarch
     - python-requests.noarch
     - python-setuptools.noarch
     - python-sexy.x86_64
     - python-six.noarch
     - python-slip.noarch
     - python-slip-dbus.noarch
     - python-sssdconfig.noarch
     - python-talloc.x86_64
     - python-urlgrabber.noarch
     - python-urllib3.noarch
     - python-xpyb.x86_64

     #+NAME: column1
     #+BEGIN_SRC elisp :var data="" :results value
       (mapcar 'car data)
     #+END_SRC

*** emms
    (add-to-list 'load-path "~/.emacs.d/emms/lisp")
    (require 'emms-setup)
    (emms-standard)
    (emms-default-players)

*** [[https://elpy.readthedocs.org/en/latest/introduction.html#overview][elpy]]

*** sudo-edit
    [[http://emacsredux.com/blog/2013/04/21/edit-files-as-root/][edit as root]]
    [[https://medium.com/@rtotheohan/emac-s-org-mode-will-improve-your-software-engineering-d7bc2f30a0#.3fss6lu8p][emacs org-mode will improve your software engineering]]
    [[https://expoundite.net/guides/dotfile-management][org-mode dotfile management]]
** vim
   [[https://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally][vim splits move faster and more naturally]]
** dtags
   #+BEGIN_SRC sh
   pip install --upgrade dtags
   #+END_SRC

   available commands:
   tag, untag, d, e, dtags

   tag:
   #+BEGIN_SRC sh
   tag ~/web dev work   # add tags 'dev' and 'work' to ~/web
   tag ~/app            # tag ~/app with its basename, 'app'
   #+END_SRC

   untag:
   #+BEGIN_SRC sh
   untag ~/web dev      # remove tag 'dev' from ~/web
   untag ~/app          # remove all tags from ~/app
   #+END_SRC

   d:
   #+BEGIN_SRC sh
   d                    # go to the user's home directory
   d frontend           # go to the directory tagged 'frontend'
   d tag_with_many_dirs # prompt the user to select a specific directory
   d ~/app              # go to directory ~/app
   #+END_SRC

   e:
   #+BEGIN_SRC sh
   e repo git status    # execute 'git status' in directories tagged 'repo'
   e ~/vm vagrant halt  # execute 'vagrant halt' in directory ~/vm
   e -p vm git pull     # execute 'git pull' in directories tagged 'vm' in parallel
   e vm,~/foo ls        # execute 'ls' in directories tagged 'vm' and ~/foo
   #+END_SRC

   dtags:
   #+BEGIN_SRC sh
   dtags                # display the directories-to-tags mapping
   dtags list ~ ~/vm    # display the tags and directories associated with ~ and ~/app
   dtags list foo bar   # display the tags and directories associated with 'foo' or 'bar'
   dtags reverse        # display the tags-to-directories mapping
   dtags edit           # edit tags and directories via editor like vim
   dtags clean          # remove invalid or stale tags and directories
   #+END_SRC

   for zsh:
   #+BEGIN_SRC sh
   echo "command -v dtags > /dev/null 2>&1 && . <(dtags shell zsh)" >> ~/.zshrc
   #+END_SRC
*** links
    [[http://www.howardism.org/Technical/Emacs/eshell-fun.html][eshell-fun]]
    [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html][imenu]]
    [[http://emacsist.com/10505][pyenv-mode]]
    [[http://pythontutor.com/][pythontutor]]
    [[http://doc.norang.ca/org-mode.html][org-mode tutorial]]
    [[http://jcarroll.com.au/2013/08/25/emacsgolf/][emacsgolf]]

** [[http://entrproject.org/][entrproject]]

* apis
  [[https://swapi.co/documentation][The Star Wars API]]
